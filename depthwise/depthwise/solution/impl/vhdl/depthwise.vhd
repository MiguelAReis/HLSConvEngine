-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    strm_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_TVALID : IN STD_LOGIC;
    strm_in_TREADY : OUT STD_LOGIC;
    strm_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    strm_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    strm_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    strm_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_TVALID : OUT STD_LOGIC;
    strm_out_TREADY : IN STD_LOGIC;
    strm_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    strm_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    strm_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    kernelN : IN STD_LOGIC_VECTOR (31 downto 0);
    kernelSize : IN STD_LOGIC_VECTOR (31 downto 0);
    mapSizeX : IN STD_LOGIC_VECTOR (31 downto 0);
    mapSizeY : IN STD_LOGIC_VECTOR (31 downto 0);
    relu : IN STD_LOGIC );
end;


architecture behav of depthwise is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "depthwise_depthwise,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=5604,HLS_SYN_TPT=none,HLS_SYN_MEM=68,HLS_SYN_DSP=0,HLS_SYN_FF=2054,HLS_SYN_LUT=2043,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_600 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal strm_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln51_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln70_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln113_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal strm_out_TDATA_blk_n : STD_LOGIC;
    signal icmp_ln107_1_reg_1595 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln101_reg_1575 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_1579 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_1587 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1591 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln112_reg_1673 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_4_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_5_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_9_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_798_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_reg_1396 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_21_fu_802_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_21_reg_1402 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_22_fu_806_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_22_reg_1407 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_23_fu_810_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_23_reg_1413 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_data_V_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_25_fu_825_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_25_reg_1426 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln47_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal n_4_fu_834_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_6_fu_885_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op105_read_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal y_5_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal y_6_fu_897_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal y_6_reg_1464 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln67_fu_909_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_1472 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln67_fu_903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv48_fu_936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv48_reg_1484 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv59_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv59_reg_1489 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_V_5_fu_948_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal accum_V_5_reg_1494 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln87_fu_958_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln87_reg_1499 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln70_reg_1508 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op158_read_state8 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln70_reg_1508_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1508_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1508_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1508_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1512 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1512_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1512_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1512_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1512_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1516 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1516_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1516_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1516_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_1516_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln69_2_fu_994_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln69_2_reg_1520 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln69_2_reg_1520_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln69_2_reg_1520_pp1_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln69_2_reg_1520_pp1_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln69_2_reg_1520_pp1_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal n_7_fu_1003_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_7_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln70_fu_1009_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln70_reg_1530 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln70_reg_1530_pp1_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln70_reg_1530_pp1_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_28_fu_1013_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_28_reg_1535 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_5_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal y_8_fu_1059_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln89_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_8_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln91_fu_1065_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kn_3_fu_1083_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln94_fu_1077_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln97_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_fu_1115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ky_2_fu_1130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln109_fu_1136_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln109_reg_1606 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal trunc_ln36_fu_1144_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln36_reg_1617 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal trunc_ln36_2_fu_1166_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln36_2_reg_1622 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_1321_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln109_1_reg_1628 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal accum_V_4_fu_1227_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal accum_V_4_reg_1666 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal and_ln112_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kx_2_fu_1303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal filter_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal filter_V_ce0 : STD_LOGIC;
    signal filter_V_we0 : STD_LOGIC;
    signal filter_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal filter_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal featureMap_V_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal featureMap_V_ce0 : STD_LOGIC;
    signal featureMap_V_we0 : STD_LOGIC;
    signal featureMap_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal featureMap_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_y_3_phi_fu_344_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_n_3_phi_fu_363_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_3_phi_fu_326_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_2_reg_378 : STD_LOGIC_VECTOR (1 downto 0);
    signal x_1_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_4_phi_fu_404_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_n_5_phi_fu_416_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_x_9_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_n_6_phi_fu_443_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_n_6_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_4_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_7_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal regslice_both_strm_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal icmp_ln87_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_2_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_9_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal kn_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_10_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_y_11_phi_fu_575_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_10_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_11_phi_fu_587_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal kn_1_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_kn_2_phi_fu_599_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ky_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_11_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_y_12_phi_fu_635_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op328_write_state34 : BOOLEAN;
    signal ap_block_state34 : BOOLEAN;
    signal ap_block_state34_io : BOOLEAN;
    signal x_11_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_x_12_phi_fu_667_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal kn_2_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_kn_4_phi_fu_699_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ky_1_phi_fu_610_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ky_1_reg_607 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ky_3_phi_fu_732_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_kx_phi_fu_622_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_12_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state33 : BOOLEAN;
    signal ap_block_state33_io : BOOLEAN;
    signal x_12_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal kn_4_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ky_3_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_kx_1_phi_fu_764_p16 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_1_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln59_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_fu_1183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_1_fu_1188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_fu_1270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_fu_869_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal accum_V_fu_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal accum_V_7_fu_1286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln69_fu_1265_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_23_fu_810_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln84_fu_916_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln85_fu_926_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal outMapYSize_fu_920_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal outMapXSize_fu_930_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_V_fu_913_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal outMapYSize_cast_fu_940_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub81_fu_952_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_962_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_998_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1309_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_1027_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_fu_1043_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln36_1_fu_1148_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln109_fu_1152_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln36_3_fu_1174_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln109_2_fu_1178_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln109_2_fu_1178_p2 : signal is "no";
    signal grp_fu_1329_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln107_fu_1203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln107_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1339_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln112_fu_1233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_1_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln116_fu_1256_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1348_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_1274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_fu_1281_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln120_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1309_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1316_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1321_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1321_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1316_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1329_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1329_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1348_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_998_ce : STD_LOGIC;
    signal grp_fu_1309_ce : STD_LOGIC;
    signal grp_fu_1348_ce : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal strm_in_TVALID_int_regslice : STD_LOGIC;
    signal strm_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_strm_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_strm_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_strm_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal strm_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_strm_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_in_V_last_V_U_ack_in : STD_LOGIC;
    signal strm_out_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal strm_out_TVALID_int_regslice : STD_LOGIC;
    signal strm_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_strm_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_strm_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_strm_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_strm_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_strm_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_strm_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_strm_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_strm_out_V_last_V_U_vld_out : STD_LOGIC;
    signal grp_fu_1321_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1348_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component depthwise_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component depthwise_ama_addmuladd_18ns_2ns_18s_18ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component depthwise_mul_mul_14s_14s_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component depthwise_ama_addmuladd_2ns_18ns_18s_18ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component depthwise_ama_addmuladd_14s_14ns_14s_14ns_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component depthwise_mac_muladd_4s_4s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component depthwise_filter_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component depthwise_featureMap_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component depthwise_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    filter_V_U : component depthwise_filter_V
    generic map (
        DataWidth => 4,
        AddressRange => 13824,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => filter_V_address0,
        ce0 => filter_V_ce0,
        we0 => filter_V_we0,
        d0 => filter_V_d0,
        q0 => filter_V_q0);

    featureMap_V_U : component depthwise_featureMap_V
    generic map (
        DataWidth => 4,
        AddressRange => 258048,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => featureMap_V_address0,
        ce0 => featureMap_V_ce0,
        we0 => featureMap_V_we0,
        d0 => featureMap_V_d0,
        q0 => featureMap_V_q0);

    mul_32s_32s_32_2_1_U1 : component depthwise_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_phi_mux_n_5_phi_fu_416_p4,
        din1 => mapSizeY,
        ce => grp_fu_998_ce,
        dout => grp_fu_998_p2);

    mul_32s_32s_32_2_1_U2 : component depthwise_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => kn_2_reg_595,
        din1 => mapSizeY,
        ce => ap_const_logic_1,
        dout => grp_fu_1125_p2);

    ama_addmuladd_18ns_2ns_18s_18ns_18_4_1_U3 : component depthwise_ama_addmuladd_18ns_2ns_18s_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 2,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => empty_28_reg_1535,
        din1 => grp_fu_1309_p1,
        din2 => empty_25_reg_1426,
        din3 => trunc_ln70_reg_1530_pp1_iter3_reg,
        ce => grp_fu_1309_ce,
        dout => grp_fu_1309_p4);

    mul_mul_14s_14s_14_4_1_U4 : component depthwise_mul_mul_14s_14s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1316_p0,
        din1 => empty_reg_1396,
        ce => ap_const_logic_1,
        dout => grp_fu_1316_p2);

    ama_addmuladd_2ns_18ns_18s_18ns_18_4_1_U5 : component depthwise_ama_addmuladd_2ns_18ns_18s_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 2,
        din1_WIDTH => 18,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1321_p0,
        din1 => trunc_ln109_reg_1606,
        din2 => empty_25_reg_1426,
        din3 => grp_fu_1321_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1321_p4);

    ama_addmuladd_14s_14ns_14s_14ns_14_4_1_U6 : component depthwise_ama_addmuladd_14s_14ns_14s_14ns_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1316_p2,
        din1 => grp_fu_1329_p1,
        din2 => empty_reg_1396,
        din3 => grp_fu_1329_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1329_p4);

    mac_muladd_4s_4s_8ns_8_4_1_U7 : component depthwise_mac_muladd_4s_4s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => filter_V_q0,
        din1 => featureMap_V_q0,
        din2 => grp_fu_1339_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1339_p3);

    ama_addmuladd_18ns_2ns_18s_18ns_18_4_1_U8 : component depthwise_ama_addmuladd_18ns_2ns_18s_18ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 2,
        din2_WIDTH => 18,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln109_reg_1606,
        din1 => grp_fu_1348_p1,
        din2 => empty_25_reg_1426,
        din3 => trunc_ln36_2_reg_1622,
        ce => grp_fu_1348_ce,
        dout => grp_fu_1348_p4);

    regslice_both_strm_in_V_data_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TDATA,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_data_V_U_ack_in,
        data_out => strm_in_TDATA_int_regslice,
        vld_out => strm_in_TVALID_int_regslice,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_data_V_U_apdone_blk);

    regslice_both_strm_in_V_keep_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TKEEP,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_keep_V_U_ack_in,
        data_out => strm_in_TKEEP_int_regslice,
        vld_out => regslice_both_strm_in_V_keep_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_keep_V_U_apdone_blk);

    regslice_both_strm_in_V_strb_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TSTRB,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_strb_V_U_ack_in,
        data_out => strm_in_TSTRB_int_regslice,
        vld_out => regslice_both_strm_in_V_strb_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_strb_V_U_apdone_blk);

    regslice_both_strm_in_V_last_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_in_TLAST,
        vld_in => strm_in_TVALID,
        ack_in => regslice_both_strm_in_V_last_V_U_ack_in,
        data_out => strm_in_TLAST_int_regslice,
        vld_out => regslice_both_strm_in_V_last_V_U_vld_out,
        ack_out => strm_in_TREADY_int_regslice,
        apdone_blk => regslice_both_strm_in_V_last_V_U_apdone_blk);

    regslice_both_strm_out_V_data_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => strm_out_TDATA_int_regslice,
        vld_in => strm_out_TVALID_int_regslice,
        ack_in => strm_out_TREADY_int_regslice,
        data_out => strm_out_TDATA,
        vld_out => regslice_both_strm_out_V_data_V_U_vld_out,
        ack_out => strm_out_TREADY,
        apdone_blk => regslice_both_strm_out_V_data_V_U_apdone_blk);

    regslice_both_strm_out_V_keep_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => strm_out_TVALID_int_regslice,
        ack_in => regslice_both_strm_out_V_keep_V_U_ack_in_dummy,
        data_out => strm_out_TKEEP,
        vld_out => regslice_both_strm_out_V_keep_V_U_vld_out,
        ack_out => strm_out_TREADY,
        apdone_blk => regslice_both_strm_out_V_keep_V_U_apdone_blk);

    regslice_both_strm_out_V_strb_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_F,
        vld_in => strm_out_TVALID_int_regslice,
        ack_in => regslice_both_strm_out_V_strb_V_U_ack_in_dummy,
        data_out => strm_out_TSTRB,
        vld_out => regslice_both_strm_out_V_strb_V_U_vld_out,
        ack_out => strm_out_TREADY,
        apdone_blk => regslice_both_strm_out_V_strb_V_U_apdone_blk);

    regslice_both_strm_out_V_last_V_U : component depthwise_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => strm_out_TVALID_int_regslice,
        ack_in => regslice_both_strm_out_V_last_V_U_ack_in_dummy,
        data_out => strm_out_TLAST,
        vld_out => regslice_both_strm_out_V_last_V_U_vld_out,
        ack_out => strm_out_TREADY,
        apdone_blk => regslice_both_strm_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln68_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                elsif (((icmp_ln68_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    accum_V_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = and_ln112_fu_1245_p2))) then 
                accum_V_fu_144 <= accum_V_4_fu_1227_p3;
            elsif ((not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then 
                accum_V_fu_144 <= accum_V_7_fu_1286_p3;
            elsif ((not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_0))) then 
                accum_V_fu_144 <= accum_V_4_reg_1666;
            end if; 
        end if;
    end process;

    count_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (strm_in_TVALID_int_regslice = ap_const_logic_1))) then 
                count_fu_132 <= ap_const_lv32_0;
            elsif ((not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln56_fu_856_p2 = ap_const_lv1_1) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                count_fu_132 <= count_1_fu_869_p2;
            end if; 
        end if;
    end process;

    kn_1_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                kn_1_reg_548 <= kn_2_reg_595;
            elsif (((icmp_ln91_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                kn_1_reg_548 <= kn_reg_512;
            end if; 
        end if;
    end process;

    kn_2_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                kn_2_reg_595 <= ap_phi_mux_kn_4_phi_fu_699_p16;
            elsif (((icmp_ln94_fu_1077_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                kn_2_reg_595 <= kn_1_reg_548;
            end if; 
        end if;
    end process;

    kn_4_reg_694_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_1105_p2 = ap_const_lv1_0) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                kn_4_reg_694 <= ap_const_lv32_600;
            elsif ((((icmp_ln105_fu_1115_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln104_fu_1110_p2 = ap_const_lv1_0) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln102_fu_1100_p2 = ap_const_lv1_0) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                kn_4_reg_694 <= ap_phi_mux_kn_2_phi_fu_599_p4;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = and_ln112_fu_1245_p2)) or (not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_0)))) then 
                kn_4_reg_694 <= kn_2_reg_595;
            end if; 
        end if;
    end process;

    kn_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                kn_reg_512 <= kn_3_fu_1083_p2;
            elsif (((icmp_ln89_fu_1053_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                kn_reg_512 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    kx_1_reg_759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = and_ln112_fu_1245_p2))) then 
                kx_1_reg_759 <= kx_reg_618;
            elsif (((icmp_ln105_fu_1115_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                kx_1_reg_759 <= ap_const_lv32_3;
            elsif ((((icmp_ln104_fu_1110_p2 = ap_const_lv1_0) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln103_fu_1105_p2 = ap_const_lv1_0) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln102_fu_1100_p2 = ap_const_lv1_0) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                kx_1_reg_759 <= ap_phi_mux_kx_phi_fu_622_p4;
            elsif (((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_0)))) then 
                kx_1_reg_759 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    kx_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                kx_reg_618 <= kx_2_fu_1303_p2;
            elsif (((icmp_ln94_fu_1077_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                kx_reg_618 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ky_1_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                ky_1_reg_607 <= ap_phi_mux_ky_3_phi_fu_732_p16;
            elsif (((icmp_ln94_fu_1077_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                ky_1_reg_607 <= ky_reg_559;
            end if; 
        end if;
    end process;

    ky_3_reg_726_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = and_ln112_fu_1245_p2))) then 
                ky_3_reg_726 <= ky_1_reg_607;
            elsif (((icmp_ln104_fu_1110_p2 = ap_const_lv1_0) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ky_3_reg_726 <= ap_const_lv32_3;
            elsif ((((icmp_ln105_fu_1115_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln103_fu_1105_p2 = ap_const_lv1_0) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln102_fu_1100_p2 = ap_const_lv1_0) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                ky_3_reg_726 <= ap_phi_mux_ky_1_phi_fu_610_p4;
            elsif (((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_0)))) then 
                ky_3_reg_726 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    ky_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                ky_reg_559 <= ky_2_fu_1130_p2;
            elsif (((icmp_ln91_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                ky_reg_559 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    n_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                n_1_reg_278 <= n_2_reg_311;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_819_p2 = ap_const_lv1_1))) then 
                n_1_reg_278 <= n_reg_254;
            end if; 
        end if;
    end process;

    n_2_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                n_2_reg_311 <= ap_phi_mux_n_3_phi_fu_363_p8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln49_fu_828_p2 = ap_const_lv1_1))) then 
                n_2_reg_311 <= n_1_reg_278;
            end if; 
        end if;
    end process;

    n_5_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1508 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                n_5_reg_412 <= n_7_reg_1525;
            elsif (((icmp_ln68_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                n_5_reg_412 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    n_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln49_fu_828_p2 = ap_const_lv1_0))) then 
                n_reg_254 <= n_4_fu_834_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (strm_in_TVALID_int_regslice = ap_const_logic_1))) then 
                n_reg_254 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_10_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                x_10_reg_536 <= x_11_reg_583;
            elsif (((icmp_ln91_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                x_10_reg_536 <= x_7_reg_501;
            end if; 
        end if;
    end process;

    x_11_reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                x_11_reg_583 <= ap_phi_mux_x_12_phi_fu_667_p16;
            elsif (((icmp_ln94_fu_1077_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                x_11_reg_583 <= x_10_reg_536;
            end if; 
        end if;
    end process;

    x_12_reg_662_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_1100_p2 = ap_const_lv1_0) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                x_12_reg_662 <= ap_const_lv32_400;
            elsif ((((icmp_ln105_fu_1115_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln104_fu_1110_p2 = ap_const_lv1_0) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln103_fu_1105_p2 = ap_const_lv1_0) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                x_12_reg_662 <= ap_phi_mux_x_11_phi_fu_587_p4;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = and_ln112_fu_1245_p2)) or (not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_0)))) then 
                x_12_reg_662 <= x_11_reg_583;
            end if; 
        end if;
    end process;

    x_1_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                x_1_reg_389 <= x_5_fu_1021_p2;
            elsif (((icmp_ln67_fu_903_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                x_1_reg_389 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_2_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                x_2_reg_477 <= x_8_fu_1071_p2;
            elsif (((icmp_ln87_fu_1037_p2 = ap_const_lv1_1) and (regslice_both_strm_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                x_2_reg_477 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_4_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1508 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                x_4_reg_401 <= x_9_reg_424;
            elsif (((icmp_ln68_fu_972_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                x_4_reg_401 <= x_1_reg_389;
            end if; 
        end if;
    end process;

    x_7_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                x_7_reg_501 <= x_10_reg_536;
            elsif (((icmp_ln89_fu_1053_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                x_7_reg_501 <= x_2_reg_477;
            end if; 
        end if;
    end process;

    x_9_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_984_p2 = ap_const_lv1_0) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                x_9_reg_424 <= ap_const_lv32_400;
            elsif ((((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln74_fu_989_p2 = ap_const_lv1_0)) or ((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln74_fu_989_p2 = ap_const_lv1_1)))) then 
                x_9_reg_424 <= ap_phi_mux_x_4_phi_fu_404_p4;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                x_9_reg_424 <= ap_phi_reg_pp1_iter0_x_9_reg_424;
            end if; 
        end if;
    end process;

    x_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_reg_289 <= x_6_fu_885_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln49_fu_828_p2 = ap_const_lv1_1))) then 
                x_reg_289 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_10_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                y_10_reg_524 <= y_11_reg_571;
            elsif (((icmp_ln91_fu_1065_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                y_10_reg_524 <= y_9_reg_489;
            end if; 
        end if;
    end process;

    y_11_reg_571_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                y_11_reg_571 <= ap_phi_mux_y_12_phi_fu_635_p16;
            elsif (((icmp_ln94_fu_1077_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                y_11_reg_571 <= y_10_reg_524;
            end if; 
        end if;
    end process;

    y_12_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln105_fu_1115_p2 = ap_const_lv1_0) and (icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln104_fu_1110_p2 = ap_const_lv1_0) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln103_fu_1105_p2 = ap_const_lv1_0) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln102_fu_1100_p2 = ap_const_lv1_0) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
                y_12_reg_630 <= ap_phi_mux_y_11_phi_fu_575_p4;
            elsif (((icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                y_12_reg_630 <= ap_const_lv32_400;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = and_ln112_fu_1245_p2)) or (not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_0)))) then 
                y_12_reg_630 <= y_11_reg_571;
            end if; 
        end if;
    end process;

    y_1_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_1_reg_300 <= ap_phi_mux_y_3_phi_fu_344_p8;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln49_fu_828_p2 = ap_const_lv1_1))) then 
                y_1_reg_300 <= y_reg_266;
            end if; 
        end if;
    end process;

    y_2_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_819_p2 = ap_const_lv1_0))) then 
                y_2_reg_378 <= ap_const_lv2_0;
            elsif (((icmp_ln68_fu_972_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                y_2_reg_378 <= y_6_reg_1464;
            end if; 
        end if;
    end process;

    y_4_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_1053_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                y_4_reg_454 <= y_8_fu_1059_p2;
            elsif (((icmp_ln67_fu_903_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                y_4_reg_454 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_7_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                y_7_reg_466 <= y_9_reg_489;
            elsif (((icmp_ln87_fu_1037_p2 = ap_const_lv1_1) and (regslice_both_strm_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                y_7_reg_466 <= y_4_reg_454;
            end if; 
        end if;
    end process;

    y_9_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln94_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                y_9_reg_489 <= y_10_reg_524;
            elsif (((icmp_ln89_fu_1053_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                y_9_reg_489 <= y_7_reg_466;
            end if; 
        end if;
    end process;

    y_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                y_reg_266 <= y_5_fu_891_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_819_p2 = ap_const_lv1_1))) then 
                y_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                accum_V_4_reg_1666 <= accum_V_4_fu_1227_p3;
                and_ln112_reg_1673 <= and_ln112_fu_1245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_903_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                accum_V_5_reg_1494 <= accum_V_5_fu_948_p1;
                conv48_reg_1484 <= conv48_fu_936_p1;
                conv59_reg_1489 <= conv59_fu_944_p1;
                sext_ln87_reg_1499 <= sext_ln87_fu_958_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then
                add_ln109_1_reg_1628 <= grp_fu_1321_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_21_reg_1402 <= empty_21_fu_802_p1;
                empty_22_reg_1407 <= empty_22_fu_806_p1;
                empty_23_reg_1413 <= empty_23_fu_810_p1;
                empty_reg_1396 <= empty_fu_798_p1;
                tmp_data_V_reg_1418 <= strm_in_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_819_p2 = ap_const_lv1_0))) then
                empty_25_reg_1426 <= empty_25_fu_825_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln74_reg_1516 = ap_const_lv1_1) and (icmp_ln73_reg_1512 = ap_const_lv1_1) and (icmp_ln70_reg_1508 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                empty_28_reg_1535 <= empty_28_fu_1013_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln101_reg_1575 <= icmp_ln101_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln102_reg_1579 <= icmp_ln102_fu_1100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln103_reg_1583 <= icmp_ln103_fu_1105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln104_reg_1587 <= icmp_ln104_fu_1110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln105_reg_1591 <= icmp_ln105_fu_1115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_fu_1115_p2 = ap_const_lv1_1) and (icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln107_1_reg_1595 <= icmp_ln107_1_fu_1120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln112_fu_1245_p2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                icmp_ln113_reg_1677 <= icmp_ln113_fu_1251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln70_reg_1508 <= icmp_ln70_fu_978_p2;
                icmp_ln70_reg_1508_pp1_iter1_reg <= icmp_ln70_reg_1508;
                icmp_ln73_reg_1512_pp1_iter1_reg <= icmp_ln73_reg_1512;
                icmp_ln74_reg_1516_pp1_iter1_reg <= icmp_ln74_reg_1516;
                trunc_ln69_2_reg_1520_pp1_iter1_reg <= trunc_ln69_2_reg_1520;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln70_reg_1508_pp1_iter2_reg <= icmp_ln70_reg_1508_pp1_iter1_reg;
                icmp_ln70_reg_1508_pp1_iter3_reg <= icmp_ln70_reg_1508_pp1_iter2_reg;
                icmp_ln70_reg_1508_pp1_iter4_reg <= icmp_ln70_reg_1508_pp1_iter3_reg;
                icmp_ln73_reg_1512_pp1_iter2_reg <= icmp_ln73_reg_1512_pp1_iter1_reg;
                icmp_ln73_reg_1512_pp1_iter3_reg <= icmp_ln73_reg_1512_pp1_iter2_reg;
                icmp_ln73_reg_1512_pp1_iter4_reg <= icmp_ln73_reg_1512_pp1_iter3_reg;
                icmp_ln74_reg_1516_pp1_iter2_reg <= icmp_ln74_reg_1516_pp1_iter1_reg;
                icmp_ln74_reg_1516_pp1_iter3_reg <= icmp_ln74_reg_1516_pp1_iter2_reg;
                icmp_ln74_reg_1516_pp1_iter4_reg <= icmp_ln74_reg_1516_pp1_iter3_reg;
                trunc_ln69_2_reg_1520_pp1_iter2_reg <= trunc_ln69_2_reg_1520_pp1_iter1_reg;
                trunc_ln69_2_reg_1520_pp1_iter3_reg <= trunc_ln69_2_reg_1520_pp1_iter2_reg;
                trunc_ln69_2_reg_1520_pp1_iter4_reg <= trunc_ln69_2_reg_1520_pp1_iter3_reg;
                trunc_ln70_reg_1530_pp1_iter2_reg <= trunc_ln70_reg_1530;
                trunc_ln70_reg_1530_pp1_iter3_reg <= trunc_ln70_reg_1530_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln73_reg_1512 <= icmp_ln73_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln74_reg_1516 <= icmp_ln74_fu_989_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                n_7_reg_1525 <= n_7_fu_1003_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                trunc_ln109_reg_1606 <= trunc_ln109_fu_1136_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                trunc_ln36_2_reg_1622 <= trunc_ln36_2_fu_1166_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                trunc_ln36_reg_1617 <= trunc_ln36_fu_1144_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln74_fu_989_p2 = ap_const_lv1_1))) then
                trunc_ln69_2_reg_1520 <= trunc_ln69_2_fu_994_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln70_reg_1508 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                trunc_ln70_reg_1530 <= trunc_ln70_fu_1009_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                y_6_reg_1464 <= y_6_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_903_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    zext_ln67_reg_1472(1 downto 0) <= zext_ln67_fu_909_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln67_reg_1472(17 downto 2) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln51_fu_840_p2, ap_enable_reg_pp1_iter0, icmp_ln70_fu_978_p2, ap_CS_fsm_state33, icmp_ln113_reg_1677, icmp_ln107_1_reg_1595, ap_CS_fsm_state34, ap_CS_fsm_state2, icmp_ln47_fu_819_p2, icmp_ln49_fu_828_p2, ap_CS_fsm_state3, ap_predicate_op105_read_state4, ap_CS_fsm_state6, icmp_ln67_fu_903_p2, icmp_ln68_fu_972_p2, ap_CS_fsm_state7, ap_CS_fsm_state16, icmp_ln89_fu_1053_p2, ap_CS_fsm_state17, icmp_ln91_fu_1065_p2, ap_CS_fsm_state18, icmp_ln94_fu_1077_p2, icmp_ln101_fu_1095_p2, ap_CS_fsm_state19, icmp_ln97_fu_1089_p2, icmp_ln102_fu_1100_p2, icmp_ln103_fu_1105_p2, icmp_ln104_fu_1110_p2, icmp_ln105_fu_1115_p2, ap_CS_fsm_state30, and_ln112_fu_1245_p2, icmp_ln113_fu_1251_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_CS_fsm_state15, regslice_both_strm_out_V_data_V_U_apdone_blk, icmp_ln87_fu_1037_p2, ap_predicate_op328_write_state34, ap_block_state34_io, ap_block_state33_io, strm_in_TVALID_int_regslice, strm_out_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (strm_in_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln47_fu_819_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln49_fu_828_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln51_fu_840_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln67_fu_903_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln68_fu_972_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln70_fu_978_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln70_fu_978_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln87_fu_1037_p2 = ap_const_lv1_0) and (regslice_both_strm_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln87_fu_1037_p2 = ap_const_lv1_1) and (regslice_both_strm_out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln89_fu_1053_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln91_fu_1065_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln94_fu_1077_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln97_fu_1089_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((icmp_ln105_fu_1115_p2 = ap_const_lv1_1) and (icmp_ln104_fu_1110_p2 = ap_const_lv1_1) and (icmp_ln103_fu_1105_p2 = ap_const_lv1_1) and (icmp_ln102_fu_1100_p2 = ap_const_lv1_1) and (icmp_ln97_fu_1089_p2 = ap_const_lv1_1) and (icmp_ln101_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_lv1_1 = and_ln112_fu_1245_p2) and (icmp_ln113_fu_1251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_const_lv1_1 = and_ln112_fu_1245_p2) and (icmp_ln113_fu_1251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if ((not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if ((not(((ap_const_boolean_1 = ap_block_state34_io) or ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    accum_V_4_fu_1227_p3 <= 
        grp_fu_1339_p3 when (icmp_ln107_1_reg_1595(0) = '1') else 
        accum_V_fu_144;
        accum_V_5_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_V_fu_913_p1),8));

    accum_V_7_fu_1286_p3 <= 
        ap_const_lv8_0 when (and_ln120_fu_1281_p2(0) = '1') else 
        accum_V_4_reg_1666;
    add_ln109_2_fu_1178_p2 <= std_logic_vector(signed(add_ln109_1_reg_1628) + signed(trunc_ln36_3_fu_1174_p1));
    add_ln109_fu_1152_p2 <= std_logic_vector(unsigned(trunc_ln36_1_fu_1148_p1) + unsigned(trunc_ln36_fu_1144_p1));
    add_ln116_fu_1256_p2 <= std_logic_vector(unsigned(trunc_ln36_reg_1617) + unsigned(ap_const_lv2_3));
    and_ln107_fu_1215_p2 <= (icmp_ln107_fu_1209_p2 and icmp_ln107_1_reg_1595);
    and_ln112_fu_1245_p2 <= (icmp_ln112_fu_1233_p2 and icmp_ln112_1_fu_1239_p2);
    and_ln120_fu_1281_p1 <= (0=>relu, others=>'-');
    and_ln120_fu_1281_p2 <= (tmp_4_fu_1274_p3 and and_ln120_fu_1281_p1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(8);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state19 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state22 <= ap_CS_fsm(16);
    ap_CS_fsm_state23 <= ap_CS_fsm(17);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(28);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter0, ap_predicate_op158_read_state8, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op158_read_state8 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, ap_predicate_op158_read_state8, strm_in_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op158_read_state8 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_assign_proc : process(icmp_ln113_reg_1677, icmp_ln107_1_reg_1595, strm_in_TVALID_int_regslice, strm_out_TREADY_int_regslice)
    begin
                ap_block_state33 <= (((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)));
    end process;


    ap_block_state33_io_assign_proc : process(icmp_ln107_1_reg_1595, strm_out_TREADY_int_regslice)
    begin
                ap_block_state33_io <= ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1));
    end process;


    ap_block_state34_assign_proc : process(ap_predicate_op328_write_state34, strm_out_TREADY_int_regslice)
    begin
                ap_block_state34 <= ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state34_io_assign_proc : process(ap_predicate_op328_write_state34, strm_out_TREADY_int_regslice)
    begin
                ap_block_state34_io <= ((ap_predicate_op328_write_state34 = ap_const_boolean_1) and (strm_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(ap_predicate_op105_read_state4, strm_in_TVALID_int_regslice)
    begin
                ap_block_state4 <= ((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state8_pp1_stage0_iter0_assign_proc : process(ap_predicate_op158_read_state8, strm_in_TVALID_int_regslice)
    begin
                ap_block_state8_pp1_stage0_iter0 <= ((ap_predicate_op158_read_state8 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln70_fu_978_p2)
    begin
        if ((icmp_ln70_fu_978_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_kn_2_phi_fu_599_p4 <= kn_2_reg_595;

    ap_phi_mux_kn_4_phi_fu_699_p16_assign_proc : process(icmp_ln107_1_reg_1595, ap_CS_fsm_state34, icmp_ln101_reg_1575, icmp_ln102_reg_1579, icmp_ln103_reg_1583, icmp_ln104_reg_1587, icmp_ln105_reg_1591, and_ln112_reg_1673, kn_2_reg_595, kn_4_reg_694)
    begin
        if (((ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then 
            ap_phi_mux_kn_4_phi_fu_699_p16 <= kn_2_reg_595;
        else 
            ap_phi_mux_kn_4_phi_fu_699_p16 <= kn_4_reg_694;
        end if; 
    end process;


    ap_phi_mux_kx_1_phi_fu_764_p16_assign_proc : process(icmp_ln107_1_reg_1595, ap_CS_fsm_state34, icmp_ln101_reg_1575, icmp_ln102_reg_1579, icmp_ln103_reg_1583, icmp_ln104_reg_1587, icmp_ln105_reg_1591, and_ln112_reg_1673, kx_1_reg_759)
    begin
        if (((ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then 
            ap_phi_mux_kx_1_phi_fu_764_p16 <= ap_const_lv32_2;
        else 
            ap_phi_mux_kx_1_phi_fu_764_p16 <= kx_1_reg_759;
        end if; 
    end process;

    ap_phi_mux_kx_phi_fu_622_p4 <= kx_reg_618;
    ap_phi_mux_ky_1_phi_fu_610_p4 <= ky_1_reg_607;

    ap_phi_mux_ky_3_phi_fu_732_p16_assign_proc : process(icmp_ln107_1_reg_1595, ap_CS_fsm_state34, icmp_ln101_reg_1575, icmp_ln102_reg_1579, icmp_ln103_reg_1583, icmp_ln104_reg_1587, icmp_ln105_reg_1591, and_ln112_reg_1673, ky_3_reg_726)
    begin
        if (((ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then 
            ap_phi_mux_ky_3_phi_fu_732_p16 <= ap_const_lv32_2;
        else 
            ap_phi_mux_ky_3_phi_fu_732_p16 <= ky_3_reg_726;
        end if; 
    end process;


    ap_phi_mux_n_3_phi_fu_363_p8_assign_proc : process(ap_CS_fsm_state4, icmp_ln51_fu_840_p2, icmp_ln54_fu_846_p2, icmp_ln55_fu_851_p2, icmp_ln56_fu_856_p2, n_2_reg_311)
    begin
        if (((icmp_ln54_fu_846_p2 = ap_const_lv1_0) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_n_3_phi_fu_363_p8 <= ap_const_lv32_600;
        elsif ((((icmp_ln56_fu_856_p2 = ap_const_lv1_1) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln56_fu_856_p2 = ap_const_lv1_0) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln55_fu_851_p2 = ap_const_lv1_0) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_phi_mux_n_3_phi_fu_363_p8 <= n_2_reg_311;
        else 
            ap_phi_mux_n_3_phi_fu_363_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_n_5_phi_fu_416_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, n_5_reg_412, icmp_ln70_reg_1508, n_7_reg_1525, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1508 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_n_5_phi_fu_416_p4 <= n_7_reg_1525;
        else 
            ap_phi_mux_n_5_phi_fu_416_p4 <= n_5_reg_412;
        end if; 
    end process;


    ap_phi_mux_n_6_phi_fu_443_p6_assign_proc : process(icmp_ln70_fu_978_p2, icmp_ln73_fu_984_p2, icmp_ln74_fu_989_p2, ap_phi_mux_n_5_phi_fu_416_p4, ap_phi_reg_pp1_iter0_n_6_reg_440)
    begin
        if (((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (icmp_ln74_fu_989_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_n_6_phi_fu_443_p6 <= ap_const_lv32_600;
        elsif ((((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (icmp_ln74_fu_989_p2 = ap_const_lv1_1)) or ((icmp_ln73_fu_984_p2 = ap_const_lv1_0) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1)))) then 
            ap_phi_mux_n_6_phi_fu_443_p6 <= ap_phi_mux_n_5_phi_fu_416_p4;
        else 
            ap_phi_mux_n_6_phi_fu_443_p6 <= ap_phi_reg_pp1_iter0_n_6_reg_440;
        end if; 
    end process;

    ap_phi_mux_x_11_phi_fu_587_p4 <= x_11_reg_583;

    ap_phi_mux_x_12_phi_fu_667_p16_assign_proc : process(icmp_ln107_1_reg_1595, ap_CS_fsm_state34, icmp_ln101_reg_1575, icmp_ln102_reg_1579, icmp_ln103_reg_1583, icmp_ln104_reg_1587, icmp_ln105_reg_1591, and_ln112_reg_1673, x_11_reg_583, x_12_reg_662)
    begin
        if (((ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then 
            ap_phi_mux_x_12_phi_fu_667_p16 <= x_11_reg_583;
        else 
            ap_phi_mux_x_12_phi_fu_667_p16 <= x_12_reg_662;
        end if; 
    end process;


    ap_phi_mux_x_3_phi_fu_326_p8_assign_proc : process(ap_CS_fsm_state4, icmp_ln51_fu_840_p2, icmp_ln54_fu_846_p2, icmp_ln55_fu_851_p2, icmp_ln56_fu_856_p2, x_reg_289)
    begin
        if (((icmp_ln56_fu_856_p2 = ap_const_lv1_0) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_x_3_phi_fu_326_p8 <= ap_const_lv32_3;
        elsif ((((icmp_ln56_fu_856_p2 = ap_const_lv1_1) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln55_fu_851_p2 = ap_const_lv1_0) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln54_fu_846_p2 = ap_const_lv1_0) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_phi_mux_x_3_phi_fu_326_p8 <= x_reg_289;
        else 
            ap_phi_mux_x_3_phi_fu_326_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_x_4_phi_fu_404_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, x_4_reg_401, x_9_reg_424, icmp_ln70_reg_1508, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1508 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_x_4_phi_fu_404_p4 <= x_9_reg_424;
        else 
            ap_phi_mux_x_4_phi_fu_404_p4 <= x_4_reg_401;
        end if; 
    end process;

    ap_phi_mux_y_11_phi_fu_575_p4 <= y_11_reg_571;

    ap_phi_mux_y_12_phi_fu_635_p16_assign_proc : process(icmp_ln107_1_reg_1595, ap_CS_fsm_state34, icmp_ln101_reg_1575, icmp_ln102_reg_1579, icmp_ln103_reg_1583, icmp_ln104_reg_1587, icmp_ln105_reg_1591, and_ln112_reg_1673, y_11_reg_571, y_12_reg_630)
    begin
        if (((ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then 
            ap_phi_mux_y_12_phi_fu_635_p16 <= y_11_reg_571;
        else 
            ap_phi_mux_y_12_phi_fu_635_p16 <= y_12_reg_630;
        end if; 
    end process;


    ap_phi_mux_y_3_phi_fu_344_p8_assign_proc : process(ap_CS_fsm_state4, icmp_ln51_fu_840_p2, icmp_ln54_fu_846_p2, icmp_ln55_fu_851_p2, icmp_ln56_fu_856_p2, y_1_reg_300)
    begin
        if (((icmp_ln55_fu_851_p2 = ap_const_lv1_0) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_y_3_phi_fu_344_p8 <= ap_const_lv32_3;
        elsif ((((icmp_ln56_fu_856_p2 = ap_const_lv1_1) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln56_fu_856_p2 = ap_const_lv1_0) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln54_fu_846_p2 = ap_const_lv1_0) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_phi_mux_y_3_phi_fu_344_p8 <= y_1_reg_300;
        else 
            ap_phi_mux_y_3_phi_fu_344_p8 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_n_6_reg_440 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter0_x_9_reg_424 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op105_read_state4_assign_proc : process(icmp_ln51_fu_840_p2, icmp_ln54_fu_846_p2, icmp_ln55_fu_851_p2, icmp_ln56_fu_856_p2)
    begin
                ap_predicate_op105_read_state4 <= ((icmp_ln56_fu_856_p2 = ap_const_lv1_1) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op158_read_state8_assign_proc : process(icmp_ln70_fu_978_p2, icmp_ln73_fu_984_p2, icmp_ln74_fu_989_p2)
    begin
                ap_predicate_op158_read_state8 <= ((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (icmp_ln74_fu_989_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op328_write_state34_assign_proc : process(icmp_ln107_1_reg_1595, icmp_ln101_reg_1575, icmp_ln102_reg_1579, icmp_ln103_reg_1583, icmp_ln104_reg_1587, icmp_ln105_reg_1591, and_ln112_reg_1673)
    begin
                ap_predicate_op328_write_state34 <= ((ap_const_lv1_1 = and_ln112_reg_1673) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bias_V_fu_913_p1 <= tmp_data_V_reg_1418(4 - 1 downto 0);
        conv48_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outMapYSize_fu_920_p2),32));

        conv59_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outMapXSize_fu_930_p2),32));

    count_1_fu_869_p2 <= std_logic_vector(unsigned(count_fu_132) + unsigned(ap_const_lv32_1));
    empty_21_fu_802_p1 <= mapSizeX(16 - 1 downto 0);
    empty_22_fu_806_p1 <= kernelSize(16 - 1 downto 0);
    empty_23_fu_810_p0 <= mapSizeY;
    empty_23_fu_810_p1 <= empty_23_fu_810_p0(16 - 1 downto 0);
    empty_25_fu_825_p1 <= mapSizeX(18 - 1 downto 0);
    empty_28_fu_1013_p1 <= grp_fu_998_p2(18 - 1 downto 0);
    empty_fu_798_p1 <= kernelSize(14 - 1 downto 0);

    featureMap_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state33, ap_CS_fsm_state26, ap_enable_reg_pp1_iter5, zext_ln77_fu_1017_p1, zext_ln109_fu_1183_p1, zext_ln116_fu_1270_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            featureMap_V_address0 <= zext_ln116_fu_1270_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            featureMap_V_address0 <= zext_ln109_fu_1183_p1(18 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            featureMap_V_address0 <= zext_ln77_fu_1017_p1(18 - 1 downto 0);
        else 
            featureMap_V_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    featureMap_V_ce0_assign_proc : process(ap_CS_fsm_state33, icmp_ln113_reg_1677, icmp_ln107_1_reg_1595, ap_block_pp1_stage0_11001, ap_CS_fsm_state26, ap_enable_reg_pp1_iter5, ap_block_state33_io, strm_in_TVALID_int_regslice, strm_out_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            featureMap_V_ce0 <= ap_const_logic_1;
        else 
            featureMap_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    featureMap_V_d0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state33, trunc_ln69_2_reg_1520_pp1_iter4_reg, ap_enable_reg_pp1_iter5, trunc_ln69_fu_1265_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            featureMap_V_d0 <= trunc_ln69_fu_1265_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1))) then 
            featureMap_V_d0 <= trunc_ln69_2_reg_1520_pp1_iter4_reg;
        else 
            featureMap_V_d0 <= "XXXX";
        end if; 
    end process;


    featureMap_V_we0_assign_proc : process(ap_CS_fsm_state33, icmp_ln113_reg_1677, icmp_ln107_1_reg_1595, ap_block_pp1_stage0_11001, icmp_ln70_reg_1508_pp1_iter4_reg, icmp_ln73_reg_1512_pp1_iter4_reg, icmp_ln74_reg_1516_pp1_iter4_reg, ap_enable_reg_pp1_iter5, ap_block_state33_io, strm_in_TVALID_int_regslice, strm_out_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (icmp_ln74_reg_1516_pp1_iter4_reg = ap_const_lv1_1) and (icmp_ln73_reg_1512_pp1_iter4_reg = ap_const_lv1_1) and (icmp_ln70_reg_1508_pp1_iter4_reg = ap_const_lv1_1)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) then 
            featureMap_V_we0 <= ap_const_logic_1;
        else 
            featureMap_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    filter_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state26, zext_ln59_fu_875_p1, zext_ln109_1_fu_1188_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            filter_V_address0 <= zext_ln109_1_fu_1188_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            filter_V_address0 <= zext_ln59_fu_875_p1(14 - 1 downto 0);
        else 
            filter_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    filter_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_predicate_op105_read_state4, ap_CS_fsm_state26, strm_in_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            filter_V_ce0 <= ap_const_logic_1;
        else 
            filter_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_V_d0 <= strm_in_TDATA_int_regslice(4 - 1 downto 0);

    filter_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln51_fu_840_p2, icmp_ln54_fu_846_p2, icmp_ln55_fu_851_p2, icmp_ln56_fu_856_p2, ap_predicate_op105_read_state4, strm_in_TVALID_int_regslice)
    begin
        if ((not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln56_fu_856_p2 = ap_const_lv1_1) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            filter_V_we0 <= ap_const_logic_1;
        else 
            filter_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1309_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_1309_ce <= ap_const_logic_1;
        else 
            grp_fu_1309_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1309_p1 <= zext_ln67_reg_1472(2 - 1 downto 0);
    grp_fu_1316_p0 <= kn_2_reg_595(14 - 1 downto 0);
    grp_fu_1321_p0 <= grp_fu_1321_p00(2 - 1 downto 0);
    grp_fu_1321_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_fu_1152_p2),18));
    grp_fu_1321_p3 <= x_11_reg_583(18 - 1 downto 0);
    grp_fu_1329_p1 <= ky_1_reg_607(14 - 1 downto 0);
    grp_fu_1329_p3 <= kx_reg_618(14 - 1 downto 0);
    grp_fu_1339_p2 <= 
        accum_V_5_reg_1494 when (and_ln107_fu_1215_p2(0) = '1') else 
        accum_V_fu_144;

    grp_fu_1348_ce_assign_proc : process(ap_CS_fsm_state33, icmp_ln113_reg_1677, icmp_ln107_1_reg_1595, ap_CS_fsm_state30, ap_block_state33_io, ap_CS_fsm_state32, ap_CS_fsm_state31, strm_in_TVALID_int_regslice, strm_out_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            grp_fu_1348_ce <= ap_const_logic_1;
        else 
            grp_fu_1348_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1348_p1 <= grp_fu_1348_p10(2 - 1 downto 0);
    grp_fu_1348_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_1256_p2),18));

    grp_fu_998_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_998_ce <= ap_const_logic_1;
        else 
            grp_fu_998_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln101_fu_1095_p2 <= "1" when (signed(y_11_reg_571) < signed(conv48_reg_1484)) else "0";
    icmp_ln102_fu_1100_p2 <= "1" when (signed(x_11_reg_583) < signed(mapSizeX)) else "0";
    icmp_ln103_fu_1105_p2 <= "1" when (signed(kn_2_reg_595) < signed(kernelN)) else "0";
    icmp_ln104_fu_1110_p2 <= "1" when (signed(ky_1_reg_607) < signed(kernelSize)) else "0";
    icmp_ln105_fu_1115_p2 <= "1" when (signed(kx_reg_618) < signed(kernelSize)) else "0";
    icmp_ln107_1_fu_1120_p2 <= "1" when (signed(x_11_reg_583) < signed(conv59_reg_1489)) else "0";
    icmp_ln107_fu_1209_p2 <= "1" when (or_ln107_fu_1203_p2 = ap_const_lv32_0) else "0";
    icmp_ln112_1_fu_1239_p2 <= "1" when (kx_reg_618 = ap_const_lv32_2) else "0";
    icmp_ln112_fu_1233_p2 <= "1" when (ky_1_reg_607 = ap_const_lv32_2) else "0";
    icmp_ln113_fu_1251_p2 <= "1" when (signed(y_11_reg_571) < signed(sext_ln87_reg_1499)) else "0";
    icmp_ln47_fu_819_p2 <= "1" when (signed(n_reg_254) < signed(ap_const_lv32_600)) else "0";
    icmp_ln49_fu_828_p2 <= "1" when (signed(y_reg_266) < signed(ap_const_lv32_3)) else "0";
    icmp_ln51_fu_840_p2 <= "1" when (signed(x_reg_289) < signed(ap_const_lv32_3)) else "0";
    icmp_ln54_fu_846_p2 <= "1" when (signed(n_2_reg_311) < signed(kernelN)) else "0";
    icmp_ln55_fu_851_p2 <= "1" when (signed(y_1_reg_300) < signed(kernelSize)) else "0";
    icmp_ln56_fu_856_p2 <= "1" when (signed(x_reg_289) < signed(kernelSize)) else "0";
    icmp_ln67_fu_903_p2 <= "1" when (y_2_reg_378 = ap_const_lv2_3) else "0";
    icmp_ln68_fu_972_p2 <= "1" when (signed(tmp_2_fu_962_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln70_fu_978_p2 <= "1" when (signed(ap_phi_mux_n_5_phi_fu_416_p4) < signed(ap_const_lv32_600)) else "0";
    icmp_ln73_fu_984_p2 <= "1" when (signed(ap_phi_mux_x_4_phi_fu_404_p4) < signed(mapSizeX)) else "0";
    icmp_ln74_fu_989_p2 <= "1" when (signed(ap_phi_mux_n_5_phi_fu_416_p4) < signed(kernelN)) else "0";
    icmp_ln87_fu_1037_p2 <= "1" when (signed(tmp_1_fu_1027_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln89_fu_1053_p2 <= "1" when (signed(tmp_3_fu_1043_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln91_fu_1065_p2 <= "1" when (signed(kn_reg_512) < signed(ap_const_lv32_600)) else "0";
    icmp_ln94_fu_1077_p2 <= "1" when (signed(ky_reg_559) < signed(ap_const_lv32_3)) else "0";
    icmp_ln97_fu_1089_p2 <= "1" when (signed(kx_reg_618) < signed(ap_const_lv32_3)) else "0";
    kn_3_fu_1083_p2 <= std_logic_vector(unsigned(kn_1_reg_548) + unsigned(ap_const_lv32_1));
    kx_2_fu_1303_p2 <= std_logic_vector(unsigned(ap_phi_mux_kx_1_phi_fu_764_p16) + unsigned(ap_const_lv32_1));
    ky_2_fu_1130_p2 <= std_logic_vector(unsigned(ky_1_reg_607) + unsigned(ap_const_lv32_1));
    n_4_fu_834_p2 <= std_logic_vector(unsigned(n_1_reg_278) + unsigned(ap_const_lv32_1));
    n_7_fu_1003_p2 <= std_logic_vector(unsigned(ap_phi_mux_n_6_phi_fu_443_p6) + unsigned(ap_const_lv32_1));
    or_ln107_fu_1203_p2 <= (ky_1_reg_607 or kx_reg_618);
    outMapXSize_fu_930_p2 <= std_logic_vector(unsigned(sub_ln85_fu_926_p2) + unsigned(ap_const_lv16_1));
        outMapYSize_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outMapYSize_fu_920_p2),17));

    outMapYSize_fu_920_p2 <= std_logic_vector(unsigned(sub_ln84_fu_916_p2) + unsigned(ap_const_lv16_1));
        sext_ln87_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub81_fu_952_p2),32));


    strm_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln51_fu_840_p2, icmp_ln54_fu_846_p2, icmp_ln55_fu_851_p2, icmp_ln56_fu_856_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln70_fu_978_p2, icmp_ln73_fu_984_p2, icmp_ln74_fu_989_p2, ap_CS_fsm_state33, icmp_ln113_reg_1677, strm_in_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or ((icmp_ln73_fu_984_p2 = ap_const_lv1_1) and (icmp_ln70_fu_978_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln74_fu_989_p2 = ap_const_lv1_1)) or ((icmp_ln56_fu_856_p2 = ap_const_lv1_1) and (icmp_ln55_fu_851_p2 = ap_const_lv1_1) and (icmp_ln54_fu_846_p2 = ap_const_lv1_1) and (icmp_ln51_fu_840_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) then 
            strm_in_TDATA_blk_n <= strm_in_TVALID_int_regslice;
        else 
            strm_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    strm_in_TREADY <= regslice_both_strm_in_V_data_V_U_ack_in;

    strm_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state33, icmp_ln113_reg_1677, icmp_ln107_1_reg_1595, ap_predicate_op105_read_state4, ap_predicate_op158_read_state8, ap_block_pp1_stage0_11001, ap_block_state33_io, strm_in_TVALID_int_regslice, strm_out_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (strm_in_TVALID_int_regslice = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_predicate_op158_read_state8 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or (not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln113_reg_1677 = ap_const_lv1_1)) or (not(((ap_predicate_op105_read_state4 = ap_const_boolean_1) and (strm_in_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op105_read_state4 = ap_const_boolean_1)))) then 
            strm_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            strm_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state33, icmp_ln107_1_reg_1595, ap_CS_fsm_state34, icmp_ln101_reg_1575, icmp_ln102_reg_1579, icmp_ln103_reg_1583, icmp_ln104_reg_1587, icmp_ln105_reg_1591, and_ln112_reg_1673, strm_out_TREADY_int_regslice)
    begin
        if ((((ap_const_lv1_1 = and_ln112_reg_1673) and (ap_const_logic_1 = ap_CS_fsm_state34) and (icmp_ln105_reg_1591 = ap_const_lv1_1) and (icmp_ln104_reg_1587 = ap_const_lv1_1) and (icmp_ln103_reg_1583 = ap_const_lv1_1) and (icmp_ln102_reg_1579 = ap_const_lv1_1) and (icmp_ln101_reg_1575 = ap_const_lv1_1) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)))) then 
            strm_out_TDATA_blk_n <= strm_out_TREADY_int_regslice;
        else 
            strm_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        strm_out_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(signed(accum_V_7_fu_1286_p3),32));

    strm_out_TVALID <= regslice_both_strm_out_V_data_V_U_vld_out;

    strm_out_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state33, icmp_ln113_reg_1677, icmp_ln107_1_reg_1595, ap_block_state33_io, strm_in_TVALID_int_regslice, strm_out_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state33_io) or ((strm_out_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1)) or ((strm_in_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln113_reg_1677 = ap_const_lv1_1)))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln107_1_reg_1595 = ap_const_lv1_1))) then 
            strm_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            strm_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    sub81_fu_952_p2 <= std_logic_vector(signed(outMapYSize_cast_fu_940_p1) + signed(ap_const_lv17_1FFFF));
    sub_ln84_fu_916_p2 <= std_logic_vector(unsigned(empty_23_reg_1413) - unsigned(empty_22_reg_1407));
    sub_ln85_fu_926_p2 <= std_logic_vector(unsigned(empty_21_reg_1402) - unsigned(empty_22_reg_1407));
    tmp_1_fu_1027_p4 <= y_4_reg_454(31 downto 10);
    tmp_2_fu_962_p4 <= x_1_reg_389(31 downto 10);
    tmp_3_fu_1043_p4 <= x_2_reg_477(31 downto 10);
    tmp_4_fu_1274_p3 <= accum_V_4_reg_1666(7 downto 7);
    trunc_ln109_fu_1136_p1 <= grp_fu_1125_p2(18 - 1 downto 0);
    trunc_ln36_1_fu_1148_p1 <= ky_1_reg_607(2 - 1 downto 0);
    trunc_ln36_2_fu_1166_p1 <= x_11_reg_583(18 - 1 downto 0);
    trunc_ln36_3_fu_1174_p1 <= kx_reg_618(18 - 1 downto 0);
    trunc_ln36_fu_1144_p1 <= y_11_reg_571(2 - 1 downto 0);
    trunc_ln69_2_fu_994_p1 <= strm_in_TDATA_int_regslice(4 - 1 downto 0);
    trunc_ln69_fu_1265_p1 <= strm_in_TDATA_int_regslice(4 - 1 downto 0);
    trunc_ln70_fu_1009_p1 <= x_4_reg_401(18 - 1 downto 0);
    x_5_fu_1021_p2 <= std_logic_vector(unsigned(x_4_reg_401) + unsigned(ap_const_lv32_1));
    x_6_fu_885_p2 <= std_logic_vector(unsigned(ap_phi_mux_x_3_phi_fu_326_p8) + unsigned(ap_const_lv32_1));
    x_8_fu_1071_p2 <= std_logic_vector(unsigned(x_7_reg_501) + unsigned(ap_const_lv32_1));
    y_5_fu_891_p2 <= std_logic_vector(unsigned(y_1_reg_300) + unsigned(ap_const_lv32_1));
    y_6_fu_897_p2 <= std_logic_vector(unsigned(y_2_reg_378) + unsigned(ap_const_lv2_1));
    y_8_fu_1059_p2 <= std_logic_vector(unsigned(y_7_reg_466) + unsigned(ap_const_lv32_1));
    zext_ln109_1_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1329_p4),64));
    zext_ln109_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_2_fu_1178_p2),64));
    zext_ln116_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1348_p4),64));
    zext_ln59_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_fu_132),64));
    zext_ln67_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_2_reg_378),18));
    zext_ln77_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1309_p4),64));
end behav;
